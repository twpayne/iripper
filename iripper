#!/usr/bin/python
#
#   Command line interface to the BBC's iPlayer
#   Copyright (C) 2009  Tom Payne
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.


from optparse import OptionParser
import subprocess
import sys
import re
from urllib2 import urlopen
from urlparse import urljoin

from BeautifulSoup import BeautifulSoup
import feedparser


def main(argv):
    op = OptionParser()
    op.add_option('-b', '--base', metavar='URL')
    op.add_option('-f', '--feed', metavar='URL')
    op.add_option('-l', '--list', action='store_const', const='list', dest='action')
    op.add_option('-p', '--play', action='store_const', const='play', dest='action')
    op.add_option('-r', '--rip', action='store_const', const='rip', dest='action')
    op.add_option('-d', '--debug', action='count')
    op.set_defaults(action='play')
    op.set_defaults(base='http://feeds.bbc.co.uk/iplayer/')
    op.set_defaults(feed='bbc_radio_one/music/dance_and_electronica')
    op.set_defaults(debug=0)
    options, args = op.parse_args(argv[1:])
    feed_url = urljoin(options.base, '/'.join((options.feed, 'list')))
    if options.debug > 1:
        print '#', feed_url
    for entry in feedparser.parse(feed_url).entries:
        if args and not any(re.search(arg, entry.title, re.I) for arg in args):
            continue
        if options.action == 'list':
            print entry.title
            continue
        if options.debug > 0:
            print '#', entry.title
        mplayer = ['mplayer', '-bandwidth', '10000000', '-rtsp-stream-over-tcp']
        if options.action == 'rip':
            m = re.match(r'(.*):\s+(\d+)/(\d+)/(\d+)\Z', entry.title)
            dumpfile = '-'.join(m.group(i) for i in (1, 4, 3, 2)) if m else entry.title
            dumpfile = re.sub(r'[^\w]+', '-', dumpfile.lower()) + '.ra'
            mplayer.extend(['-dumpstream', '-dumpfile', dumpfile])
        elif options.action == 'play':
            mplayer.extend(['-cache', '65536'])
        content_soup = BeautifulSoup(entry.content[0].value)
        iplayer_url = content_soup.find('a')['href']
        if options.debug > 1:
            print '#', iplayer_url
        iplayer_soup = BeautifulSoup(urlopen(iplayer_url))
        ram_url = iplayer_soup.find('a', attrs={'href': re.compile(r'\.ram$')})['href']
        if options.debug > 1:
            print '#', ram_url
        rtsp_url = urlopen(ram_url).read()
        mplayer.append(rtsp_url)
        if options.debug > 0:
            print '#', ' '.join(mplayer)
        if options.debug < 3:
            subprocess.call(mplayer)

if __name__ == '__main__':
    main(sys.argv)
